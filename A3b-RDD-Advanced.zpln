{
  "paragraphs": [
    {
      "text": "%md\n# Big Data: Advanced Spark RDD",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Big Data: Advanced Spark RDD</h1>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_1831086338",
      "id": "20210323-214017_1217973860",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:198"
    },
    {
      "text": "%md\n## Deeper Understanding of Spark\n\nThe goal of part B of Assignment 3 is deepen our understanding of what happens \"under the hood\".\n\nDo not just click shift enter on every cell, but try to grasp what is happening by looking into the Spark UI after executing each command.\n\nLearn the details by using variants of the example queries; create a new cell, or duplicate the cell and modify it. The knowledge you gain will be useful throughout the course, helpful in getting things to work at scale for the final assignment, and, help you pass the exam easily because you know how the design principles that are taught in the theory lectures work out in practice in actual code.\n\n### A Range of Numbers",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Deeper Understanding of Spark</h2>\n<p>The goal of part B of Assignment 3 is deepen our understanding of what happens &ldquo;under the hood&rdquo;.</p>\n<p>Do not just click shift enter on every cell, but try to grasp what is happening by looking into the Spark UI after executing each command.</p>\n<p>Learn the details by using variants of the example queries; create a new cell, or duplicate the cell and modify it. The knowledge you gain will be useful throughout the course, helpful in getting things to work at scale for the final assignment, and, help you pass the exam easily because you know how the design principles that are taught in the theory lectures work out in practice in actual code.</p>\n<h3>A Range of Numbers</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_1028936280",
      "id": "20210323-214017_1348659670",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:199"
    },
    {
      "text": "%spark\nimport org.apache.spark.HashPartitioner\n\nval rddRange = sc.parallelize(0 to 999,8)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:52:51+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_1911669813",
      "id": "20210323-214017_1526376678",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:200"
    },
    {
      "text": "%md\n_That was quick!_\n\nRemember that the evaluation of Spark expressions is lazy, and only happens upon actions, not transformations; i.e., so far, nothing happened really happened, we only created an expression that specifies an RDD with 1000 values divided over 8 partitions.\n\nCheck the [Spark UI](http://localhost:4040): jobs and stages do not yet contain entries corresponding to this command.\n\n_Note: Port number `:4040` can be a higher one, e.g., `:4041`, depending on how many notebooks you run under the same kernel. If you did not see that coming, it may be better to restart the Docker container, or you'd have to add the extra port forwards to the `docker create` command._",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>That was quick!</em></p>\n<p>Remember that the evaluation of Spark expressions is lazy, and only happens upon actions, not transformations; i.e., so far, nothing happened really happened, we only created an expression that specifies an RDD with 1000 values divided over 8 partitions.</p>\n<p>Check the <a href=\"http://localhost:4040\">Spark UI</a>: jobs and stages do not yet contain entries corresponding to this command.</p>\n<p><em>Note: Port number <code>:4040</code> can be a higher one, e.g., <code>:4041</code>, depending on how many notebooks you run under the same kernel. If you did not see that coming, it may be better to restart the Docker container, or you&rsquo;d have to add the extra port forwards to the <code>docker create</code> command.</em></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_140894981",
      "id": "20210323-214017_276769842",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:201"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddRange.partitions.length)\nrddRange.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:52:54+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_368353259",
      "id": "20210323-214017_1304985490",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:202"
    },
    {
      "text": "%md\n_Partitions:_\n\nThe default number of partitions depends on the number of cores in the machine that runs the docker engine; see e.g., `cat /proc/cpuinfo` from a `bash` shell in the docker engine. In this case, we have taken control by specifying a desired number of partitions in the `parallelize` command. Spark does not know how the numbers are divided over the partitions, it does not understand that we used a Scala operation to create a sequence that consists of the first 1000 natural numbers.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Partitions:</em></p>\n<p>The default number of partitions depends on the number of cores in the machine that runs the docker engine; see e.g., <code>cat /proc/cpuinfo</code> from a <code>bash</code> shell in the docker engine. In this case, we have taken control by specifying a desired number of partitions in the <code>parallelize</code> command. Spark does not know how the numbers are divided over the partitions, it does not understand that we used a Scala operation to create a sequence that consists of the first 1000 natural numbers.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_2109985886",
      "id": "20210323-214017_1000819039",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:203"
    },
    {
      "text": "%md\n## Pairs\nThe next command creates pairs of numbers, that we will treat as key-value pairs in the remainder of this notebook.\n\nIf you have not looked at Spark documentation so far, this would be a good time to go through the information on transformations and PairRDD functions:\n\n+ https://spark.apache.org/docs/3.1.1/rdd-programming-guide.html#transformations\n+ https://spark.apache.org/docs/3.1.1/api/scala/org/apache/spark/rdd/PairRDDFunctions.html\n\n_Right click on the link to open a new Tab in your browser (have you installed Firefox yet?) is easiest to process this information alongside the notebook itself._",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Pairs</h2>\n<p>The next command creates pairs of numbers, that we will treat as key-value pairs in the remainder of this notebook.</p>\n<p>If you have not looked at Spark documentation so far, this would be a good time to go through the information on transformations and PairRDD functions:</p>\n<ul>\n  <li><a href=\"https://spark.apache.org/docs/3.1.1/rdd-programming-guide.html#transformations\">https://spark.apache.org/docs/3.1.1/rdd-programming-guide.html#transformations</a></li>\n  <li><a href=\"https://spark.apache.org/docs/3.1.1/api/scala/org/apache/spark/rdd/PairRDDFunctions.html\">https://spark.apache.org/docs/3.1.1/api/scala/org/apache/spark/rdd/PairRDDFunctions.html</a></li>\n</ul>\n<p><em>Right click on the link to open a new Tab in your browser (have you installed Firefox yet?) is easiest to process this information alongside the notebook itself.</em></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617908_1744391200",
      "id": "20210323-214017_1203666798",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:204"
    },
    {
      "text": "%spark\nval rddPairs = rddRange.map(x => (x % 100, 1000 - x))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:52:58+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_823671556",
      "id": "20210323-214017_753817829",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:205"
    },
    {
      "text": "%md\n_Think then act!_\n\nTry to understand what `rddPairs` consists of before executing the next cell. Can you draw on paper what the outcome of action `take(15)` will be when applied to `rddPairs`?",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Think then act!</em></p>\n<p>Try to understand what <code>rddPairs</code> consists of before executing the next cell. Can you draw on paper what the outcome of action <code>take(15)</code> will be when applied to <code>rddPairs</code>?</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_501841544",
      "id": "20210323-214017_575964677",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:206"
    },
    {
      "text": "%spark\nrddPairs.take(15)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_1541026310",
      "id": "20210323-214017_599314081",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:207"
    },
    {
      "text": "%spark\nrddPairs.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:03+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_1634364689",
      "id": "20210323-214017_399085751",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:208"
    },
    {
      "text": "%md\n_Partitions (continued):_\n\nAs we see, the default way of processing does not assign a partitioner; the framework partitions the data in the default way, which is merely a guess. You can however influence the way partitioning the RDD takes place, where the easiest one is to assign a partitioner manually.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Partitions (continued):</em></p>\n<p>As we see, the default way of processing does not assign a partitioner; the framework partitions the data in the default way, which is merely a guess. You can however influence the way partitioning the RDD takes place, where the easiest one is to assign a partitioner manually.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_549777059",
      "id": "20210323-214017_1237244891",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:209"
    },
    {
      "text": "%spark\nval rddPairsPart2 = rddPairs.partitionBy(new HashPartitioner(2))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:07+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_1232553615",
      "id": "20210323-214017_1339820103",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:210"
    },
    {
      "text": "%md\n_Did you read the documentation so you can predict the outcome of the following cell?_",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Did you read the documentation so you can predict the outcome of the following cell?</em></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_727166801",
      "id": "20210323-214017_712252123",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:211"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddPairsPart2.partitions.length)\nrddPairsPart2.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:09+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617909_1394519257",
      "id": "20210323-214017_1910729482",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:212"
    },
    {
      "text": "%md\n_Partitions and partitioners (continued):_\n\nSee how that influences processing; `rddPairs` is partitioned as we specified in `parallelize`, whereas `rddPairsPart2` consists of just two partitions, as a consequence of our instruction to `partitionBy` a `HashPartitioner`.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Partitions and partitioners (continued):</em></p>\n<p>See how that influences processing; <code>rddPairs</code> is partitioned as we specified in <code>parallelize</code>, whereas <code>rddPairsPart2</code> consists of just two partitions, as a consequence of our instruction to <code>partitionBy</code> a <code>HashPartitioner</code>.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1781018789",
      "id": "20210323-214017_1320945390",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:213"
    },
    {
      "text": "%spark\nval rddPairsGroup = rddPairs.groupByKey()",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:12+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1177821209",
      "id": "20210323-214017_1628283214",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:214"
    },
    {
      "text": "%md\n_Look what happens!_\n\nWe will group the pairs by their keys -- which were created from the initial sequence by `x % 100`, i.e., there should be 10 different key values and therefore 10 different groups. Let's do that twice, and see the effect of partitioning on the (physical representation of the) result. Of course, logically, the results are identical -- in both cases, we are grouping the exact same dataset of pairs of numbers. However, physically, Spark has the freedom to organize data differently.\n\nFirst without a partitioner.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Look what happens!</em></p>\n<p>We will group the pairs by their keys &ndash; which were created from the initial sequence by <code>x % 100</code>, i.e., there should be 10 different key values and therefore 10 different groups. Let&rsquo;s do that twice, and see the effect of partitioning on the (physical representation of the) result. Of course, logically, the results are identical &ndash; in both cases, we are grouping the exact same dataset of pairs of numbers. However, physically, Spark has the freedom to organize data differently.</p>\n<p>First without a partitioner.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_966876144",
      "id": "20210323-214017_1806028150",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:215"
    },
    {
      "text": "%spark\nrddPairsGroup.toDebugString",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:15+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1817418964",
      "id": "20210323-214017_464846095",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:216"
    },
    {
      "text": "%md\n_Intermezzo:_\n\nThe data will be shuffled to create the groups. Spark does not know about the number of groups, even if we can figure it out ourselves. Efficient grouping operations over numeric data will use hashing, because the engine cannot know how many groups there are -- it only knows the cardinality and the number of partitions. After grouping, it can collect all the groups with the same hashcode at the seem \"reducer\" (using Map Reduce terminology).",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Intermezzo:</em></p>\n<p>The data will be shuffled to create the groups. Spark does not know about the number of groups, even if we can figure it out ourselves. Efficient grouping operations over numeric data will use hashing, because the engine cannot know how many groups there are &ndash; it only knows the cardinality and the number of partitions. After grouping, it can collect all the groups with the same hashcode at the seem &ldquo;reducer&rdquo; (using Map Reduce terminology).</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1481651807",
      "id": "20210323-214017_1727490445",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:217"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddPairsGroup.partitions.length)\nrddPairsGroup.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:19+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1753855189",
      "id": "20210323-214017_75408021",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:218"
    },
    {
      "text": "%md\n_Grouping \"random\" ranges of numbers:_\n\nWe see that Spark _remembers_ the `HashPartitioner` it used to create the grouping. Because the original data had 8 partitions, it opts to create 8 partitions in the result as well, each with a different hashing function result.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Grouping &ldquo;random&rdquo; ranges of numbers:</em></p>\n<p>We see that Spark <em>remembers</em> the <code>HashPartitioner</code> it used to create the grouping. Because the original data had 8 partitions, it opts to create 8 partitions in the result as well, each with a different hashing function result.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1483690212",
      "id": "20210323-214017_721438644",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:219"
    },
    {
      "text": "%spark\nrddPairsGroup.partitions.map(p => (p, p.index, p.hashCode))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1575801831",
      "id": "20210323-214017_392207198",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:220"
    },
    {
      "text": "%md\n_Grouping hashed ranges of numbers:_\n\nIn the other case, Spark has more knowledge about the ranges of values that exist in which partitions, and uses that prior information to choose a different physical plan to create the grouping.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Grouping hashed ranges of numbers:</em></p>\n<p>In the other case, Spark has more knowledge about the ranges of values that exist in which partitions, and uses that prior information to choose a different physical plan to create the grouping.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617910_1260945840",
      "id": "20210323-214017_1241916222",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:221"
    },
    {
      "text": "%spark\nval rddPairsGroupPart2 = rddPairsPart2.groupByKey()\nrddPairsGroupPart2.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:25+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1401484904",
      "id": "20210323-214017_1000168161",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:222"
    },
    {
      "text": "%spark\nrddPairsGroupPart2.partitions.map(p => (p, p.index, p.hashCode))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:27+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1176319948",
      "id": "20210323-214017_311003073",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:223"
    },
    {
      "text": "%md\n_Intermezzo:_\n\nTake a close look at the differences between the results above, and form a mental model in line with the theory from the Spark thesis Chapter that we read for the course. Observe how the number of partitions of a groupByKey operation varies depending on the way the input is partitioned. This in turn affects the number of machines that will be at work in subsequent operations. Take a look at the Spark UI to understand how the different partitioning outcomes affect the number of mappers that will be used to compute the results.\n\n_Note: using explicit naming of RDDs helps you keep track of which job corresponds to which case._",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Intermezzo:</em></p>\n<p>Take a close look at the differences between the results above, and form a mental model in line with the theory from the Spark thesis Chapter that we read for the course. Observe how the number of partitions of a groupByKey operation varies depending on the way the input is partitioned. This in turn affects the number of machines that will be at work in subsequent operations. Take a look at the Spark UI to understand how the different partitioning outcomes affect the number of mappers that will be used to compute the results.</p>\n<p><em>Note: using explicit naming of RDDs helps you keep track of which job corresponds to which case.</em></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_380245864",
      "id": "20210323-214017_18896037",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:224"
    },
    {
      "text": "%md\n_The story continues:_\n\nBelow, we expect you to figure out how the differences in processing come about. We no longer spell out the differences; even if so, do not just shift-enter through all the cells without thinking!\n\nConsider it a nice puzzle -- it works best if you try to predict what the outcome is, before you look at the actual results. Ideally, your blog post does not just copy these cryptically named results, but creates a story from a data problem where the decisions in partitioning make a difference and that difference can be explained to the reader. On ranges of a thousand numbers, it hardly matters what physical processing takes place, but when you analyze tens of Terabytes of Web crawl data, you better get the hang of Spark processing to succeed within reasonable execution times!",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>The story continues:</em></p>\n<p>Below, we expect you to figure out how the differences in processing come about. We no longer spell out the differences; even if so, do not just shift-enter through all the cells without thinking!</p>\n<p>Consider it a nice puzzle &ndash; it works best if you try to predict what the outcome is, before you look at the actual results. Ideally, your blog post does not just copy these cryptically named results, but creates a story from a data problem where the decisions in partitioning make a difference and that difference can be explained to the reader. On ranges of a thousand numbers, it hardly matters what physical processing takes place, but when you analyze tens of Terabytes of Web crawl data, you better get the hang of Spark processing to succeed within reasonable execution times!</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1518723391",
      "id": "20210323-214017_351811194",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:225"
    },
    {
      "text": "%spark\nval rddPGP2Count = rddPairsGroupPart2.map( {case(x,y) => (x, y.reduce((a,b) => a + b))} )",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:30+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_104850954",
      "id": "20210323-214017_546452301",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:226"
    },
    {
      "text": "%spark\nrddPGP2Count.name = \"Partitioned Group Counts (2)\"",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:32+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1853683222",
      "id": "20210323-214017_1613266892",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:227"
    },
    {
      "text": "%spark\nrddPGP2Count.take(10)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:34+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1815754423",
      "id": "20210323-214017_1810635332",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:228"
    },
    {
      "text": "%spark\nrddPGP2Count.partitions.size",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:37+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_204164470",
      "id": "20210323-214017_74392996",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:229"
    },
    {
      "text": "%spark\nrddPGP2Count.toDebugString",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:39+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1891830274",
      "id": "20210323-214017_894854719",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:230"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddPGP2Count.partitions.length)\nrddPGP2Count.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_276754720",
      "id": "20210323-214017_379828550",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:231"
    },
    {
      "text": "%md\nQ: do you understand why the partitioner is none? \n\n_(No worries if not, you will find a clue below.)_",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Q: do you understand why the partitioner is none? </p>\n<p><em>(No worries if not, you will find a clue below.)</em></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_1932621259",
      "id": "20210323-214017_488026092",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:232"
    },
    {
      "text": "%spark\nval rddPairsPart4 = rddPairs.partitionBy(new HashPartitioner(4))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:47+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_352327103",
      "id": "20210323-214017_1621748719",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:233"
    },
    {
      "text": "%spark\nrddPairsPart4.take(10)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:49+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_992610820",
      "id": "20210323-214017_1724386907",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:234"
    },
    {
      "text": "%spark\nval rddA = rddPairsPart4.values.map( x => x  + 10 )",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:51+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617911_913459548",
      "id": "20210323-214017_1831531085",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:235"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddA.partitions.length)\nrddA.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:53+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_733299265",
      "id": "20210323-214017_1173051851",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:236"
    },
    {
      "text": "%spark\nval rddB = rddPairsPart4.mapValues( x => x + 10 )",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:53:58+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1702366258",
      "id": "20210323-214017_1790059530",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:237"
    },
    {
      "text": "%spark\nprintf( \"Number of partitions: %d\\n\", rddB.partitions.length)\nrddB.partitioner",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:00+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_340468639",
      "id": "20210323-214017_1286489553",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:238"
    },
    {
      "text": "%md\n_Questions to let sink in:_\n\n+ Why are the results different for rddA and rddB? \n+ How is query processing affected by the partitioners?\n\n__Summarizing:__ partitioning depends on the distributed operations that are executed, and only operations with guarantees about the output distribution will carry an existing partitioner over to its result. The difference between `map` and `mapValues` has been discussed in the lectures, I hope you see the connection to the examples above!",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Questions to let sink in:</em></p>\n<ul>\n  <li>Why are the results different for rddA and rddB?</li>\n  <li>How is query processing affected by the partitioners?</li>\n</ul>\n<p><strong>Summarizing:</strong> partitioning depends on the distributed operations that are executed, and only operations with guarantees about the output distribution will carry an existing partitioner over to its result. The difference between <code>map</code> and <code>mapValues</code> has been discussed in the lectures, I hope you see the connection to the examples above!</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_826098890",
      "id": "20210323-214017_1982627475",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:239"
    },
    {
      "text": "%md\n_Controlling parallellism part 2:_\n\nAnother way to control the level of parallellism during query execution is to use the `repartition` and `coalesce` operation, to reorganize the data and thereby either increase the amount of parallellism (by creating more partitions) or reducing the overhead of too much parallellism (by merging existing partitions into a smaller number). Let's explore!",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>Controlling parallellism part 2:</em></p>\n<p>Another way to control the level of parallellism during query execution is to use the <code>repartition</code> and <code>coalesce</code> operation, to reorganize the data and thereby either increase the amount of parallellism (by creating more partitions) or reducing the overhead of too much parallellism (by merging existing partitions into a smaller number). Let&rsquo;s explore!</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_657839822",
      "id": "20210323-214017_2128038071",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:240"
    },
    {
      "text": "%spark\nval rddC = rddA.repartition(2)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_288313146",
      "id": "20210323-214017_1632643197",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:241"
    },
    {
      "text": "%spark\nrddC.partitions.map(p => (p, p.index, p.hashCode))",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:06+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1990610924",
      "id": "20210323-214017_1546899510",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:242"
    },
    {
      "text": "%spark\nrddC.toDebugString",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:08+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1172683129",
      "id": "20210323-214017_1553511865",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:243"
    },
    {
      "text": "%spark\nval rddD = rddB.coalesce(2)",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:11+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1533766177",
      "id": "20210323-214017_1102115685",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:244"
    },
    {
      "text": "%spark\nrddD.toDebugString",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:13+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_218393490",
      "id": "20210323-214017_566438126",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:245"
    },
    {
      "text": "%md\n_No words, action!_\n\nRemember the lazy execution model -- only actions make things happen. Therefore, if you inspect the Spark UI right now, there are __no query plans__ that correspond to the above commands. Let us take two samples from the results.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><em>No words, action!</em></p>\n<p>Remember the lazy execution model &ndash; only actions make things happen. Therefore, if you inspect the Spark UI right now, there are <strong>no query plans</strong> that correspond to the above commands. Let us take two samples from the results.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_582232672",
      "id": "20210323-214017_1664351872",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:246"
    },
    {
      "text": "%spark\nrddC.takeSample(true, 10);",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:16+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_150018621",
      "id": "20210323-214017_1426084903",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:247"
    },
    {
      "text": "%spark\nrddD.takeSample(true, 10);",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:54:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1020789240",
      "id": "20210323-214017_1541022546",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:248"
    },
    {
      "text": "%md\nCan you find out how the jobs and stages came about, that you find [in the Spark UI](http://localhost:4040)?\n\nAlso, compare the two query plans for `rddC` and `rddD` that we printed in the cells above. Can you explain why the second query plan requires one shuffle phase less?",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Can you find out how the jobs and stages came about, that you find <a href=\"http://localhost:4040\">in the Spark UI</a>?</p>\n<p>Also, compare the two query plans for <code>rddC</code> and <code>rddD</code> that we printed in the cells above. Can you explain why the second query plan requires one shuffle phase less?</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617912_1399884104",
      "id": "20210323-214017_1099051495",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:249"
    },
    {
      "text": "%md\n## Wrap up\n\nIf you have reached this point propery and understood what you observed, you have a solid understanding of Spark and its execution model.\n\nAssignment 4 will move up the stack to consider the Dataframe API.",
      "user": "anonymous",
      "dateUpdated": "2021-03-23T21:40:17+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Wrap up</h2>\n<p>If you have reached this point propery and understood what you observed, you have a solid understanding of Spark and its execution model.</p>\n<p>Assignment 4 will move up the stack to consider the Dataframe API.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1616535617913_832292716",
      "id": "20210323-214017_672918386",
      "dateCreated": "2021-03-23T21:40:17+0000",
      "status": "READY",
      "$$hashKey": "object:250"
    }
  ],
  "name": "A3 Part B",
  "id": "2G1PW27BC",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/A3 Part B"
}